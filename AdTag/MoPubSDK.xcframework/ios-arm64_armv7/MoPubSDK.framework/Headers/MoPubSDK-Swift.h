#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef MOPUBSDK_SWIFT_H
#define MOPUBSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoPubSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("APIEndpoints")
@interface MPAPIEndpoints : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull adRequestURLComponents;)
+ (NSURLComponents * _Nonnull)adRequestURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull nativePositioningURLComponents;)
+ (NSURLComponents * _Nonnull)nativePositioningURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull openURLComponents;)
+ (NSURLComponents * _Nonnull)openURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull consentDialogURLComponents;)
+ (NSURLComponents * _Nonnull)consentDialogURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull consentSyncURLComponents;)
+ (NSURLComponents * _Nonnull)consentSyncURLComponents SWIFT_WARN_UNUSED_RESULT;
/// Returns the base hostname string for the MoPub ads URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull baseHostname;)
+ (NSString * _Nonnull)baseHostname SWIFT_WARN_UNUSED_RESULT;
+ (void)setBaseHostname:(NSString * _Nonnull)value;
/// Returns a URL containing the base hostname string for the MoPub ads URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable baseURL;)
+ (NSURL * _Nullable)baseURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull skAdNetworkSyncURLComponents;)
+ (NSURLComponents * _Nonnull)skAdNetworkSyncURLComponents SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CTCarrier;
enum MPNetworkStatus : NSInteger;

/// Class that represents information about cellular service.
SWIFT_CLASS_NAMED("CellularService")
@interface MPCellularService : NSObject
/// The carrier of this cellular service.
@property (nonatomic, readonly, strong) CTCarrier * _Nonnull carrier;
/// The current radio technology used by this service to connect to the internet.
@property (nonatomic, readonly) enum MPNetworkStatus currentRadioAccessTechnology;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MPURLRequest;
@class NSURLResponse;

/// <code>ConsentSyncSerialNetworkSession</code> is a thread safe utility for serially performing non-duplicate consent sync requests with <code>MPHTTPNetworkSession</code>. <code>ConsentSyncSerialNetworkSession</code> provides the ability to deduplicate and prevent subsequent consent sync requests from being performed.
SWIFT_CLASS_NAMED("ConsentSyncSerialNetworkSession")
@interface MPConsentSyncSerialNetworkSession : NSObject
/// Convenience initializer to create a <code>ConsentSyncSerialNetworkSession</code> instance with <code>MPHTTPNetworkSession</code>
///
/// returns:
/// An initialized <code>ConsentSyncSerialNetworkSession</code>.
- (nonnull instancetype)init;
/// Attempts to start a task with the provided <code>MPURLRequest</code> instance. Based on comparison results derived from the <code>URLRequestComparable</code> comparator, the request may not execute, and subsequently the <code>responseHandler</code> and <code>errorHandler</code> will not be invoked.
/// \param request Request to send.
///
/// \param responseHandler Optional response handler that will be invoked on the main thread.
///
/// \param errorHandler Optional error handler that will be invoked on the main thread.
///
- (void)attemptTaskWith:(MPURLRequest * _Nonnull)request responseHandler:(void (^ _Nullable)(NSData * _Nullable, NSURLResponse * _Nullable))responseHandler errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
@end


/// Provides a common means of deduplicating URL-specific requests rather than <code>MPURLRequest</code> as a whole.
SWIFT_PROTOCOL_NAMED("URLRequestComparable")
@protocol MPURLRequestComparable
- (BOOL)isRequest:(MPURLRequest * _Nullable)urlRequest1 duplicateOf:(MPURLRequest * _Nullable)urlRequest2 SWIFT_WARN_UNUSED_RESULT;
@end


/// Concrete implementation of <code>URLRequestComparable</code> for specifically deduplicating instances of <code>MPURLRequest</code> that represent consent syncronization requests.
SWIFT_CLASS_NAMED("ConsentSynchronizationURLCompare")
@interface MPConsentSynchronizationURLCompare : NSObject <MPURLRequestComparable>
/// For the <code>consentSynchronizationUrl</code> we use the URL and post data to determine equality. Other properties that are part of the <code>MPURLRequest</code> like the cache policy, cookie policy, user agent value, etc. are ignored.
- (BOOL)isRequest:(MPURLRequest * _Nullable)urlRequest1 duplicateOf:(MPURLRequest * _Nullable)urlRequest2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Manages conversion tracking for the MoPub SDK.
SWIFT_CLASS_NAMED("ConversionManager")
@interface MPConversionManager : NSObject
/// Sets the application identifier used for conversion tracking purposes.
/// \param applicationId The iTunes ID for the application.
///
+ (void)setConversionAppId:(NSString * _Nonnull)applicationId;
/// Tracks the app conversion.
/// If the conversion has already been tracked, this method will return immediately.
/// note:
/// The conversion tracking event is considered PII and it is the caller’s responsibility to check
/// that PII is allowed to be sent before calling this method.
+ (void)trackConversion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DeviceInformation")
@interface MPDeviceInformation : NSObject
/// Call upon SDK startup to initalize this class.
+ (void)startWithCompletion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger appTransportSecuritySettingsValue;)
+ (NSInteger)appTransportSecuritySettingsValue SWIFT_WARN_UNUSED_RESULT;
/// The version of the application, as listed in its Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable applicationVersion;)
+ (NSString * _Nullable)applicationVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
/// The current cellular service in use on this device, or nil if the device does not have cellular service.
/// If the device has muliple cellular services, this picks one of them arbitrarily.
/// Specified as a dynamic property to facilitate unit testing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPCellularService * _Nullable cellularService;)
+ (MPCellularService * _Nullable)cellularService SWIFT_WARN_UNUSED_RESULT;
+ (void)setCellularService:(MPCellularService * _Nullable)value;
/// The current network status (not reachable, WiFi, 3G, 4G, 5G, etc.)
/// Logic and comments come from Apple’s Reachability sample code in <code>[Reachability networkStatusForFlags:]</code> at https://developer.apple.com/library/archive/samplecode/Reachability/Introduction/Intro.html)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MPNetworkStatus currentNetworkStatus;)
+ (enum MPNetworkStatus)currentNetworkStatus SWIFT_WARN_UNUSED_RESULT;
@end

enum MPLocationAuthorizationStatus : NSInteger;
@class CLLocation;

@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
/// Flag indicating that location can be queried from <code>CLLocationManager</code>. The default value is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLocation;)
+ (BOOL)enableLocation SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLocation:(BOOL)value;
/// Current location authorization status.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MPLocationAuthorizationStatus locationAuthorizationStatus;)
+ (enum MPLocationAuthorizationStatus)locationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromLocationAuthorizationStatus:(enum MPLocationAuthorizationStatus)status SWIFT_WARN_UNUSED_RESULT;
/// The last known valid location. This will be <code>nil</code> if there is no authorization to acquire the location, or if <code>enableLocation</code> has been set to <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CLLocation * _Nullable lastLocation;)
+ (CLLocation * _Nullable)lastLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ImageCreativeData")
@interface MPImageCreativeData : NSObject
/// Converts server response data into this model class
/// Returns <code>nil</code> if <code>imageURL</code> is missing from the server response.
- (nullable instancetype)initWithServerResponseData:(NSData * _Nullable)serverResponseData OBJC_DESIGNATED_INITIALIZER;
/// The decoded image URL
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The decoded clickthrough URL, if available
@property (nonatomic, readonly, copy) NSURL * _Nullable clickthroughURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;
@protocol MPImageCreativeViewDelegate;
@class UIImage;

/// <code>ImageCreativeView</code> is a <code>UIImageView</code> subclass with a <code>UIClickGestureRecognizer</code>
/// attached to detect clicks, and with some sensible default settings for ad creatives.
/// Clicks are not enabled by default, but can be enabled when desired by calling
/// <code>enableClick()</code>. Click events can be captured by setting the <code>delegate</code> object
/// and implementing <code>imageCreativeViewWasClicked(_:)</code>.
SWIFT_CLASS_NAMED("ImageCreativeView")
@interface MPImageCreativeView : UIImageView
/// Required <code>init?(coder:)</code> had to be overridden.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Override so <code>init(frame:)</code> works too.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience <code>init</code> for ease-of-use programatically.
- (nonnull instancetype)init;
/// Flag indicating if clicks are presently enabled.
@property (nonatomic, readonly) BOOL isClickable;
/// Latch to enable clicks (they cannot be disabled once enabled).
- (void)enableClick;
/// Delegate to receive click events
@property (nonatomic, weak) id <MPImageCreativeViewDelegate> _Nullable delegate;
/// Override <code>layoutSubviews()</code> to alter the <code>contentMode</code> to either center or aspect fit the image
/// The image should be centered without scaling if it is smaller than the view dimensions.
/// The image should be scaled down via aspect-fit if it is larger than the view dimensions.
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("ImageCreativeViewDelegate")
@protocol MPImageCreativeViewDelegate
@optional
/// This method is notified when the image view was tapped
- (void)imageCreativeViewWasClicked:(MPImageCreativeView * _Nonnull)imageCreativeView;
@end


SWIFT_CLASS_NAMED("ImageCreator")
@interface MPImageCreator : NSObject
/// Creates either an animated <code>UIImage</code> from a GIF, or a static <code>UIImage</code> from any other format.
/// \param data The data to create the image from.
///
///
/// returns:
/// A <code>UIImage</code> if one could be created, or nil if not.
+ (UIImage * _Nullable)imageWith:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MPLocationAuthorizationStatus, "LocationAuthorizationStatus", open) {
/// The user has not chosen whether the app can use location services.
/// This maps directly to <code>kCLAuthorizationStatusNotDetermined</code>
  MPLocationAuthorizationStatusNotDetermined = 0,
/// The app is not authorized to use location services. The user cannot change this app’s status, possibly due to active restrictions such as parental controls being in place.
/// This maps directly to <code>kCLAuthorizationStatusRestricted</code>
  MPLocationAuthorizationStatusRestricted = 1,
/// The user denied the use of location services for the app.
/// This is an aggregation of <code>kCLAuthorizationStatusDenied</code> and <code>CLLocationManager.locationServicesEnabled</code> is set to <code>true</code>
  MPLocationAuthorizationStatusUserDenied = 2,
/// The system denied the use of location services for the app.
/// This is an aggregation of <code>kCLAuthorizationStatusDenied</code> and <code>CLLocationManager.locationServicesEnabled</code> is set to <code>false</code>
  MPLocationAuthorizationStatusSettingsDenied = 3,
/// The publisher has denied the use of location services for the app by setting <code>MoPub.locationUpdatesEnabled</code> to <code>false</code>.
/// The system and user denied statuses take precedence over this value.
  MPLocationAuthorizationStatusPublisherDenied = 4,
/// The user authorized the app to start location services at any time.
/// This maps directly to <code>kCLAuthorizationStatusAuthorizedAlways</code>
  MPLocationAuthorizationStatusAuthorizedAlways = 5,
/// The user authorized the app to start location services while it is in use.
/// This maps directly to <code>kCLAuthorizationStatusAuthorizedWhenInUse</code>
  MPLocationAuthorizationStatusAuthorizedWhenInUse = 6,
/// The status is unknown.
  MPLocationAuthorizationStatusUnknown = 7,
};


typedef SWIFT_ENUM_NAMED(NSInteger, MPNetworkStatus, "NetworkStatus", open) {
  MPNetworkStatusNotReachable = 0,
  MPNetworkStatusReachableViaWiFi = 2,
  MPNetworkStatusReachableViaCellularNetworkUnknownGeneration = 3,
  MPNetworkStatusReachableViaCellularNetwork2G = 4,
  MPNetworkStatusReachableViaCellularNetwork3G = 5,
  MPNetworkStatusReachableViaCellularNetwork4G = 6,
  MPNetworkStatusReachableViaCellularNetwork5G = 7,
};


/// <code>ResumableTimer</code> is a thread safe wrapper for <code>Timer</code>, with pause and resume functionality.
SWIFT_CLASS_NAMED("ResumableTimer")
@interface MPResumableTimer : NSObject
/// Indicates if the timer is active. This will return <code>false</code> when the timer is paused.
@property (nonatomic, readonly) BOOL isCountdownActive;
/// A Boolean value that indicates whether the timer is currently valid.
@property (nonatomic, readonly) BOOL isValid;
/// Initializes the timer.
/// \param timerInterval The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param repeats If <code>true</code>, the timer will repeatedly reschedule itself until invalidated. If <code>false</code>, the timer will be invalidated after it fires. The default is <code>false</code>
///
/// \param runLoopMode The run loop mode that the timer will run on. The default mode is <code>RunLoop.Mode.default</code>.
///
/// \param closure The execution body of the timer; the timer itself is passed as the parameter to this closure when executed to aid in avoiding cyclical references.
///
///
/// returns:
/// An initialized timer.
- (nonnull instancetype)initWithInterval:(NSTimeInterval)timerInterval repeats:(BOOL)repeats runLoopMode:(NSRunLoopMode _Nonnull)runLoopMode closure:(void (^ _Nonnull)(MPResumableTimer * _Nonnull))closure OBJC_DESIGNATED_INITIALIZER;
/// Stops the timer from ever firing again and requests its removal from its run loop.
- (void)invalidate;
/// Pauses the timer if active.
- (void)pause;
/// Schedules the timer to start with the remaining time interval.
/// note:
/// Call this method to start or resume the timer.
- (void)scheduleNow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef MOPUBSDK_SWIFT_H
#define MOPUBSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoPubSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("APIEndpoints")
@interface MPAPIEndpoints : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull adRequestURLComponents;)
+ (NSURLComponents * _Nonnull)adRequestURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull nativePositioningURLComponents;)
+ (NSURLComponents * _Nonnull)nativePositioningURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull openURLComponents;)
+ (NSURLComponents * _Nonnull)openURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull consentDialogURLComponents;)
+ (NSURLComponents * _Nonnull)consentDialogURLComponents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull consentSyncURLComponents;)
+ (NSURLComponents * _Nonnull)consentSyncURLComponents SWIFT_WARN_UNUSED_RESULT;
/// Returns the base hostname string for the MoPub ads URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull baseHostname;)
+ (NSString * _Nonnull)baseHostname SWIFT_WARN_UNUSED_RESULT;
+ (void)setBaseHostname:(NSString * _Nonnull)value;
/// Returns a URL containing the base hostname string for the MoPub ads URL.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable baseURL;)
+ (NSURL * _Nullable)baseURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURLComponents * _Nonnull skAdNetworkSyncURLComponents;)
+ (NSURLComponents * _Nonnull)skAdNetworkSyncURLComponents SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CTCarrier;
enum MPNetworkStatus : NSInteger;

/// Class that represents information about cellular service.
SWIFT_CLASS_NAMED("CellularService")
@interface MPCellularService : NSObject
/// The carrier of this cellular service.
@property (nonatomic, readonly, strong) CTCarrier * _Nonnull carrier;
/// The current radio technology used by this service to connect to the internet.
@property (nonatomic, readonly) enum MPNetworkStatus currentRadioAccessTechnology;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MPURLRequest;
@class NSURLResponse;

/// <code>ConsentSyncSerialNetworkSession</code> is a thread safe utility for serially performing non-duplicate consent sync requests with <code>MPHTTPNetworkSession</code>. <code>ConsentSyncSerialNetworkSession</code> provides the ability to deduplicate and prevent subsequent consent sync requests from being performed.
SWIFT_CLASS_NAMED("ConsentSyncSerialNetworkSession")
@interface MPConsentSyncSerialNetworkSession : NSObject
/// Convenience initializer to create a <code>ConsentSyncSerialNetworkSession</code> instance with <code>MPHTTPNetworkSession</code>
///
/// returns:
/// An initialized <code>ConsentSyncSerialNetworkSession</code>.
- (nonnull instancetype)init;
/// Attempts to start a task with the provided <code>MPURLRequest</code> instance. Based on comparison results derived from the <code>URLRequestComparable</code> comparator, the request may not execute, and subsequently the <code>responseHandler</code> and <code>errorHandler</code> will not be invoked.
/// \param request Request to send.
///
/// \param responseHandler Optional response handler that will be invoked on the main thread.
///
/// \param errorHandler Optional error handler that will be invoked on the main thread.
///
- (void)attemptTaskWith:(MPURLRequest * _Nonnull)request responseHandler:(void (^ _Nullable)(NSData * _Nullable, NSURLResponse * _Nullable))responseHandler errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
@end


/// Provides a common means of deduplicating URL-specific requests rather than <code>MPURLRequest</code> as a whole.
SWIFT_PROTOCOL_NAMED("URLRequestComparable")
@protocol MPURLRequestComparable
- (BOOL)isRequest:(MPURLRequest * _Nullable)urlRequest1 duplicateOf:(MPURLRequest * _Nullable)urlRequest2 SWIFT_WARN_UNUSED_RESULT;
@end


/// Concrete implementation of <code>URLRequestComparable</code> for specifically deduplicating instances of <code>MPURLRequest</code> that represent consent syncronization requests.
SWIFT_CLASS_NAMED("ConsentSynchronizationURLCompare")
@interface MPConsentSynchronizationURLCompare : NSObject <MPURLRequestComparable>
/// For the <code>consentSynchronizationUrl</code> we use the URL and post data to determine equality. Other properties that are part of the <code>MPURLRequest</code> like the cache policy, cookie policy, user agent value, etc. are ignored.
- (BOOL)isRequest:(MPURLRequest * _Nullable)urlRequest1 duplicateOf:(MPURLRequest * _Nullable)urlRequest2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Manages conversion tracking for the MoPub SDK.
SWIFT_CLASS_NAMED("ConversionManager")
@interface MPConversionManager : NSObject
/// Sets the application identifier used for conversion tracking purposes.
/// \param applicationId The iTunes ID for the application.
///
+ (void)setConversionAppId:(NSString * _Nonnull)applicationId;
/// Tracks the app conversion.
/// If the conversion has already been tracked, this method will return immediately.
/// note:
/// The conversion tracking event is considered PII and it is the caller’s responsibility to check
/// that PII is allowed to be sent before calling this method.
+ (void)trackConversion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("DeviceInformation")
@interface MPDeviceInformation : NSObject
/// Call upon SDK startup to initalize this class.
+ (void)startWithCompletion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger appTransportSecuritySettingsValue;)
+ (NSInteger)appTransportSecuritySettingsValue SWIFT_WARN_UNUSED_RESULT;
/// The version of the application, as listed in its Info.plist.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable applicationVersion;)
+ (NSString * _Nullable)applicationVersion SWIFT_WARN_UNUSED_RESULT;
@end


@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
/// The current cellular service in use on this device, or nil if the device does not have cellular service.
/// If the device has muliple cellular services, this picks one of them arbitrarily.
/// Specified as a dynamic property to facilitate unit testing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MPCellularService * _Nullable cellularService;)
+ (MPCellularService * _Nullable)cellularService SWIFT_WARN_UNUSED_RESULT;
+ (void)setCellularService:(MPCellularService * _Nullable)value;
/// The current network status (not reachable, WiFi, 3G, 4G, 5G, etc.)
/// Logic and comments come from Apple’s Reachability sample code in <code>[Reachability networkStatusForFlags:]</code> at https://developer.apple.com/library/archive/samplecode/Reachability/Introduction/Intro.html)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MPNetworkStatus currentNetworkStatus;)
+ (enum MPNetworkStatus)currentNetworkStatus SWIFT_WARN_UNUSED_RESULT;
@end

enum MPLocationAuthorizationStatus : NSInteger;
@class CLLocation;

@interface MPDeviceInformation (SWIFT_EXTENSION(MoPubSDK))
/// Flag indicating that location can be queried from <code>CLLocationManager</code>. The default value is <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLocation;)
+ (BOOL)enableLocation SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLocation:(BOOL)value;
/// Current location authorization status.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MPLocationAuthorizationStatus locationAuthorizationStatus;)
+ (enum MPLocationAuthorizationStatus)locationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromLocationAuthorizationStatus:(enum MPLocationAuthorizationStatus)status SWIFT_WARN_UNUSED_RESULT;
/// The last known valid location. This will be <code>nil</code> if there is no authorization to acquire the location, or if <code>enableLocation</code> has been set to <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CLLocation * _Nullable lastLocation;)
+ (CLLocation * _Nullable)lastLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("ImageCreativeData")
@interface MPImageCreativeData : NSObject
/// Converts server response data into this model class
/// Returns <code>nil</code> if <code>imageURL</code> is missing from the server response.
- (nullable instancetype)initWithServerResponseData:(NSData * _Nullable)serverResponseData OBJC_DESIGNATED_INITIALIZER;
/// The decoded image URL
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// The decoded clickthrough URL, if available
@property (nonatomic, readonly, copy) NSURL * _Nullable clickthroughURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;
@protocol MPImageCreativeViewDelegate;
@class UIImage;

/// <code>ImageCreativeView</code> is a <code>UIImageView</code> subclass with a <code>UIClickGestureRecognizer</code>
/// attached to detect clicks, and with some sensible default settings for ad creatives.
/// Clicks are not enabled by default, but can be enabled when desired by calling
/// <code>enableClick()</code>. Click events can be captured by setting the <code>delegate</code> object
/// and implementing <code>imageCreativeViewWasClicked(_:)</code>.
SWIFT_CLASS_NAMED("ImageCreativeView")
@interface MPImageCreativeView : UIImageView
/// Required <code>init?(coder:)</code> had to be overridden.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Override so <code>init(frame:)</code> works too.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience <code>init</code> for ease-of-use programatically.
- (nonnull instancetype)init;
/// Flag indicating if clicks are presently enabled.
@property (nonatomic, readonly) BOOL isClickable;
/// Latch to enable clicks (they cannot be disabled once enabled).
- (void)enableClick;
/// Delegate to receive click events
@property (nonatomic, weak) id <MPImageCreativeViewDelegate> _Nullable delegate;
/// Override <code>layoutSubviews()</code> to alter the <code>contentMode</code> to either center or aspect fit the image
/// The image should be centered without scaling if it is smaller than the view dimensions.
/// The image should be scaled down via aspect-fit if it is larger than the view dimensions.
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("ImageCreativeViewDelegate")
@protocol MPImageCreativeViewDelegate
@optional
/// This method is notified when the image view was tapped
- (void)imageCreativeViewWasClicked:(MPImageCreativeView * _Nonnull)imageCreativeView;
@end


SWIFT_CLASS_NAMED("ImageCreator")
@interface MPImageCreator : NSObject
/// Creates either an animated <code>UIImage</code> from a GIF, or a static <code>UIImage</code> from any other format.
/// \param data The data to create the image from.
///
///
/// returns:
/// A <code>UIImage</code> if one could be created, or nil if not.
+ (UIImage * _Nullable)imageWith:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MPLocationAuthorizationStatus, "LocationAuthorizationStatus", open) {
/// The user has not chosen whether the app can use location services.
/// This maps directly to <code>kCLAuthorizationStatusNotDetermined</code>
  MPLocationAuthorizationStatusNotDetermined = 0,
/// The app is not authorized to use location services. The user cannot change this app’s status, possibly due to active restrictions such as parental controls being in place.
/// This maps directly to <code>kCLAuthorizationStatusRestricted</code>
  MPLocationAuthorizationStatusRestricted = 1,
/// The user denied the use of location services for the app.
/// This is an aggregation of <code>kCLAuthorizationStatusDenied</code> and <code>CLLocationManager.locationServicesEnabled</code> is set to <code>true</code>
  MPLocationAuthorizationStatusUserDenied = 2,
/// The system denied the use of location services for the app.
/// This is an aggregation of <code>kCLAuthorizationStatusDenied</code> and <code>CLLocationManager.locationServicesEnabled</code> is set to <code>false</code>
  MPLocationAuthorizationStatusSettingsDenied = 3,
/// The publisher has denied the use of location services for the app by setting <code>MoPub.locationUpdatesEnabled</code> to <code>false</code>.
/// The system and user denied statuses take precedence over this value.
  MPLocationAuthorizationStatusPublisherDenied = 4,
/// The user authorized the app to start location services at any time.
/// This maps directly to <code>kCLAuthorizationStatusAuthorizedAlways</code>
  MPLocationAuthorizationStatusAuthorizedAlways = 5,
/// The user authorized the app to start location services while it is in use.
/// This maps directly to <code>kCLAuthorizationStatusAuthorizedWhenInUse</code>
  MPLocationAuthorizationStatusAuthorizedWhenInUse = 6,
/// The status is unknown.
  MPLocationAuthorizationStatusUnknown = 7,
};


typedef SWIFT_ENUM_NAMED(NSInteger, MPNetworkStatus, "NetworkStatus", open) {
  MPNetworkStatusNotReachable = 0,
  MPNetworkStatusReachableViaWiFi = 2,
  MPNetworkStatusReachableViaCellularNetworkUnknownGeneration = 3,
  MPNetworkStatusReachableViaCellularNetwork2G = 4,
  MPNetworkStatusReachableViaCellularNetwork3G = 5,
  MPNetworkStatusReachableViaCellularNetwork4G = 6,
  MPNetworkStatusReachableViaCellularNetwork5G = 7,
};


/// <code>ResumableTimer</code> is a thread safe wrapper for <code>Timer</code>, with pause and resume functionality.
SWIFT_CLASS_NAMED("ResumableTimer")
@interface MPResumableTimer : NSObject
/// Indicates if the timer is active. This will return <code>false</code> when the timer is paused.
@property (nonatomic, readonly) BOOL isCountdownActive;
/// A Boolean value that indicates whether the timer is currently valid.
@property (nonatomic, readonly) BOOL isValid;
/// Initializes the timer.
/// \param timerInterval The number of seconds between firings of the timer. If seconds is less than or equal to 0.0, this method chooses the nonnegative value of 0.1 milliseconds instead.
///
/// \param repeats If <code>true</code>, the timer will repeatedly reschedule itself until invalidated. If <code>false</code>, the timer will be invalidated after it fires. The default is <code>false</code>
///
/// \param runLoopMode The run loop mode that the timer will run on. The default mode is <code>RunLoop.Mode.default</code>.
///
/// \param closure The execution body of the timer; the timer itself is passed as the parameter to this closure when executed to aid in avoiding cyclical references.
///
///
/// returns:
/// An initialized timer.
- (nonnull instancetype)initWithInterval:(NSTimeInterval)timerInterval repeats:(BOOL)repeats runLoopMode:(NSRunLoopMode _Nonnull)runLoopMode closure:(void (^ _Nonnull)(MPResumableTimer * _Nonnull))closure OBJC_DESIGNATED_INITIALIZER;
/// Stops the timer from ever firing again and requests its removal from its run loop.
- (void)invalidate;
/// Pauses the timer if active.
- (void)pause;
/// Schedules the timer to start with the remaining time interval.
/// note:
/// Call this method to start or resume the timer.
- (void)scheduleNow;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
